
Test_leds_2.elf:     file format elf32-littlenios2
Test_leds_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000604 memsz 0x00000604 flags r-x
    LOAD off    0x00001624 vaddr 0x00008624 paddr 0x00008628 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000162c vaddr 0x0000862c paddr 0x0000862c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000005e4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  00008604  00008604  00001604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  00008624  00008628  00001624  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  0000862c  0000862c  0000162c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000228  00000000  00000000  00001650  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000002ab  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001038  00000000  00000000  00001b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000898  00000000  00000000  00002b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000221b  00000000  00000000  000033f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002b8  00000000  00000000  00005610  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000760  00000000  00000000  000058c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000551  00000000  00000000  00006028  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0000657c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  000065c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00007529  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  0000752c  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00007531  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  00007532  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  00007536  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0000753a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0000753e  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00007549  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00007554  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0000755f  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000051  00000000  00000000  0000756a  2**0
                  CONTENTS, READONLY
 27 .jdi          000041f0  00000000  00000000  000075bb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00008604 l    d  .rodata	00000000 .rodata
00008624 l    d  .rwdata	00000000 .rwdata
0000862c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_2.c
00000000 l    df *ABS*	00000000 alt_load.c
000080e4 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008480 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00008170 g     F .text	0000002c alt_main
00008628 g       *ABS*	00000000 __flash_rwdata_start
0000862c g     O .bss	00000001 bp
00008330 g     F .text	00000038 alt_putstr
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008634 g     O .bss	00000004 alt_argv
00010624 g       *ABS*	00000000 _gp
00008368 g     F .text	00000004 usleep
00008458 g     F .text	00000008 altera_nios2_irq_init
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000085bc g     F .text	00000008 __udivsi3
0000863c g       *ABS*	00000000 __bss_end
00008450 g     F .text	00000004 alt_dcache_flush_all
00008628 g       *ABS*	00000000 __ram_rwdata_end
00008624 g       *ABS*	00000000 __ram_rodata_end
00008624 g     O .rwdata	00000004 jtag_uart_0
000085c4 g     F .text	00000008 __umodsi3
0000863c g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008390 g     F .text	00000034 altera_avalon_jtag_uart_write
0000819c g     F .text	00000144 alt_printf
00008020 g     F .text	0000003c _start
0000836c g     F .text	00000004 alt_sys_init
000085cc g     F .text	00000038 __mulsi3
00008624 g       *ABS*	00000000 __ram_rwdata_start
00008604 g       *ABS*	00000000 __ram_rodata_start
000083c4 g     F .text	0000008c alt_busy_sleep
0000863c g       *ABS*	00000000 __alt_stack_base
0000862c g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000088 main
00008638 g     O .bss	00000004 alt_envp
000084fc g     F .text	00000060 __divsi3
00008604 g       *ABS*	00000000 __flash_rodata_start
00008370 g     F .text	00000020 alt_irq_init
00008630 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008628 g       *ABS*	00000000 _edata
0000863c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000800c g       .entry	00000000 exit
0000855c g     F .text	00000060 __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008460 g     F .text	00000020 strlen
000082e0 g     F .text	00000050 alt_putchar
00008454 g     F .text	00000004 alt_icache_flush_all
00008104 g     F .text	0000006c alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6818914 	ori	gp,gp,1572
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a18b14 	ori	r2,r2,34348

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e18f14 	ori	r3,r3,34364

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00081040 	call	8104 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081700 	call	8170 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
	unsigned char bp;
	#define boutons (char * )  BOUTONS_BASE
	#define  leds (char * ) LEDS_BASE

int main()
{ 
    805c:	deffff04 	addi	sp,sp,-4

	alt_putstr("Hello from Nios II!\n");
    8060:	01000074 	movhi	r4,1
    8064:	21218104 	addi	r4,r4,-31228
	unsigned char bp;
	#define boutons (char * )  BOUTONS_BASE
	#define  leds (char * ) LEDS_BASE

int main()
{ 
    8068:	dfc00015 	stw	ra,0(sp)

	alt_putstr("Hello from Nios II!\n");
    806c:	00083300 	call	8330 <alt_putstr>

  /* Event loop never exits. */
  while (1)
  {

	  (bp	=	(*boutons)&3);
    8070:	00800074 	movhi	r2,1
    8074:	10840004 	addi	r2,r2,4096
    8078:	10800003 	ldbu	r2,0(r2)
	  alt_printf("A=%x;\n",bp);
    807c:	01000074 	movhi	r4,1
    8080:	21218704 	addi	r4,r4,-31204

  /* Event loop never exits. */
  while (1)
  {

	  (bp	=	(*boutons)&3);
    8084:	108000cc 	andi	r2,r2,3
	  alt_printf("A=%x;\n",bp);
    8088:	100b883a 	mov	r5,r2

  /* Event loop never exits. */
  while (1)
  {

	  (bp	=	(*boutons)&3);
    808c:	d0a00205 	stb	r2,-32760(gp)
	  alt_printf("A=%x;\n",bp);
    8090:	000819c0 	call	819c <alt_printf>
	  switch(bp)
    8094:	d0e00203 	ldbu	r3,-32760(gp)
    8098:	00800044 	movi	r2,1
    809c:	18800d26 	beq	r3,r2,80d4 <main+0x78>
    80a0:	18800c36 	bltu	r3,r2,80d4 <main+0x78>
    80a4:	00800084 	movi	r2,2
    80a8:	18bff126 	beq	r3,r2,8070 <main+0x14>
    80ac:	008000c4 	movi	r2,3
    80b0:	1880081e 	bne	r3,r2,80d4 <main+0x78>
	  {
	  case	0:	*leds	=	0;break;
	  case	1:	*leds	=	0;break;
	  case	2:	break;
	  case	3:	*leds	=	*leds	+	1; usleep(100);break;
    80b4:	00c00074 	movhi	r3,1
    80b8:	18c40404 	addi	r3,r3,4112
    80bc:	18800003 	ldbu	r2,0(r3)
    80c0:	01001904 	movi	r4,100
    80c4:	10800044 	addi	r2,r2,1
    80c8:	18800005 	stb	r2,0(r3)
    80cc:	00083680 	call	8368 <usleep>
    80d0:	003fe706 	br	8070 <main+0x14>

	  default	:	*leds	=	0;break;
    80d4:	00800074 	movhi	r2,1
    80d8:	10840404 	addi	r2,r2,4112
    80dc:	10000005 	stb	zero,0(r2)
    80e0:	003fe306 	br	8070 <main+0x14>

000080e4 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    80e4:	2900051e 	bne	r5,r4,80fc <alt_load_section+0x18>
    80e8:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    80ec:	20800017 	ldw	r2,0(r4)
    80f0:	21000104 	addi	r4,r4,4
    80f4:	28800015 	stw	r2,0(r5)
    80f8:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    80fc:	29bffb1e 	bne	r5,r6,80ec <alt_load_section+0x8>
    8100:	f800283a 	ret

00008104 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8104:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8108:	01000074 	movhi	r4,1
    810c:	21218a04 	addi	r4,r4,-31192
    8110:	01400074 	movhi	r5,1
    8114:	29618904 	addi	r5,r5,-31196
    8118:	01800074 	movhi	r6,1
    811c:	31a18a04 	addi	r6,r6,-31192
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8120:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8124:	00080e40 	call	80e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8128:	01000074 	movhi	r4,1
    812c:	21200804 	addi	r4,r4,-32736
    8130:	01400074 	movhi	r5,1
    8134:	29600804 	addi	r5,r5,-32736
    8138:	01800074 	movhi	r6,1
    813c:	31a00804 	addi	r6,r6,-32736
    8140:	00080e40 	call	80e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8144:	01000074 	movhi	r4,1
    8148:	21218104 	addi	r4,r4,-31228
    814c:	01400074 	movhi	r5,1
    8150:	29618104 	addi	r5,r5,-31228
    8154:	01800074 	movhi	r6,1
    8158:	31a18904 	addi	r6,r6,-31196
    815c:	00080e40 	call	80e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8160:	00084500 	call	8450 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8164:	dfc00017 	ldw	ra,0(sp)
    8168:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    816c:	00084541 	jmpi	8454 <alt_icache_flush_all>

00008170 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8170:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8174:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8178:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    817c:	00083700 	call	8370 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8180:	000836c0 	call	836c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8184:	d1200317 	ldw	r4,-32756(gp)
    8188:	d1600417 	ldw	r5,-32752(gp)
    818c:	d1a00517 	ldw	r6,-32748(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8190:	dfc00017 	ldw	ra,0(sp)
    8194:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8198:	000805c1 	jmpi	805c <main>

0000819c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    819c:	defff804 	addi	sp,sp,-32
    81a0:	dfc00415 	stw	ra,16(sp)
    81a4:	dc800315 	stw	r18,12(sp)
    81a8:	dc400215 	stw	r17,8(sp)
    81ac:	dc000115 	stw	r16,4(sp)
    81b0:	d9400515 	stw	r5,20(sp)
    81b4:	d9800615 	stw	r6,24(sp)
    81b8:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    81bc:	d8800504 	addi	r2,sp,20
    81c0:	2025883a 	mov	r18,r4
    81c4:	d8800015 	stw	r2,0(sp)
    81c8:	00003d06 	br	82c0 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    81cc:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    81d0:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    81d4:	18800226 	beq	r3,r2,81e0 <alt_printf+0x44>
        {
            alt_putchar(c);
    81d8:	1809883a 	mov	r4,r3
    81dc:	00000a06 	br	8208 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    81e0:	91000007 	ldb	r4,0(r18)
    81e4:	94800044 	addi	r18,r18,1
    81e8:	20003726 	beq	r4,zero,82c8 <alt_printf+0x12c>
            {
                if (c == '%')
    81ec:	20c00626 	beq	r4,r3,8208 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    81f0:	008018c4 	movi	r2,99
    81f4:	2080061e 	bne	r4,r2,8210 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    81f8:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    81fc:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    8200:	10800104 	addi	r2,r2,4
    8204:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    8208:	00082e00 	call	82e0 <alt_putchar>
    820c:	00002c06 	br	82c0 <alt_printf+0x124>
                }
                else if (c == 'x')
    8210:	00801e04 	movi	r2,120
    8214:	20801e1e 	bne	r4,r2,8290 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    8218:	d8800017 	ldw	r2,0(sp)
    821c:	14400017 	ldw	r17,0(r2)
    8220:	10800104 	addi	r2,r2,4
    8224:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    8228:	88000226 	beq	r17,zero,8234 <alt_printf+0x98>
    822c:	04000704 	movi	r16,28
    8230:	00000306 	br	8240 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    8234:	01000c04 	movi	r4,48
    8238:	003ff306 	br	8208 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    823c:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    8240:	008003c4 	movi	r2,15
    8244:	1404983a 	sll	r2,r2,r16
    8248:	8884703a 	and	r2,r17,r2
    824c:	103ffb26 	beq	r2,zero,823c <alt_printf+0xa0>
    8250:	00000b06 	br	8280 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    8254:	8884703a 	and	r2,r17,r2
    8258:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    825c:	00800244 	movi	r2,9
                            c = '0' + digit;
    8260:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    8264:	10c0012e 	bgeu	r2,r3,826c <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    8268:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    826c:	21003fcc 	andi	r4,r4,255
    8270:	2100201c 	xori	r4,r4,128
    8274:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    8278:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    827c:	00082e00 	call	82e0 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    8280:	008003c4 	movi	r2,15
    8284:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    8288:	803ff20e 	bge	r16,zero,8254 <alt_printf+0xb8>
    828c:	00000c06 	br	82c0 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    8290:	00801cc4 	movi	r2,115
    8294:	20800a1e 	bne	r4,r2,82c0 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    8298:	d8800017 	ldw	r2,0(sp)
    829c:	14000017 	ldw	r16,0(r2)
    82a0:	10800104 	addi	r2,r2,4
    82a4:	d8800015 	stw	r2,0(sp)
    82a8:	00000106 	br	82b0 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    82ac:	00082e00 	call	82e0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    82b0:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    82b4:	84000044 	addi	r16,r16,1
    82b8:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    82bc:	103ffb1e 	bne	r2,zero,82ac <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    82c0:	90c00007 	ldb	r3,0(r18)
    82c4:	183fc11e 	bne	r3,zero,81cc <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    82c8:	dfc00417 	ldw	ra,16(sp)
    82cc:	dc800317 	ldw	r18,12(sp)
    82d0:	dc400217 	ldw	r17,8(sp)
    82d4:	dc000117 	ldw	r16,4(sp)
    82d8:	dec00804 	addi	sp,sp,32
    82dc:	f800283a 	ret

000082e0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    82e0:	defffd04 	addi	sp,sp,-12
    82e4:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    82e8:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    82ec:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    82f0:	01800044 	movi	r6,1
    82f4:	01000074 	movhi	r4,1
    82f8:	21218904 	addi	r4,r4,-31196
    82fc:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    8300:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    8304:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    8308:	00083900 	call	8390 <altera_avalon_jtag_uart_write>
    830c:	1009883a 	mov	r4,r2
    8310:	00bfffc4 	movi	r2,-1
    8314:	2080011e 	bne	r4,r2,831c <alt_putchar+0x3c>
    8318:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    831c:	8005883a 	mov	r2,r16
    8320:	dfc00217 	ldw	ra,8(sp)
    8324:	dc000117 	ldw	r16,4(sp)
    8328:	dec00304 	addi	sp,sp,12
    832c:	f800283a 	ret

00008330 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8330:	defffe04 	addi	sp,sp,-8
    8334:	dc000015 	stw	r16,0(sp)
    8338:	dfc00115 	stw	ra,4(sp)
    833c:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8340:	00084600 	call	8460 <strlen>
    8344:	800b883a 	mov	r5,r16
    8348:	100d883a 	mov	r6,r2
    834c:	01000074 	movhi	r4,1
    8350:	21218904 	addi	r4,r4,-31196
    8354:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    8358:	dfc00117 	ldw	ra,4(sp)
    835c:	dc000017 	ldw	r16,0(sp)
    8360:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8364:	00083901 	jmpi	8390 <altera_avalon_jtag_uart_write>

00008368 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8368:	00083c41 	jmpi	83c4 <alt_busy_sleep>

0000836c <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    836c:	f800283a 	ret

00008370 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8370:	deffff04 	addi	sp,sp,-4
    8374:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    8378:	00084580 	call	8458 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    837c:	00800044 	movi	r2,1
    8380:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8384:	dfc00017 	ldw	ra,0(sp)
    8388:	dec00104 	addi	sp,sp,4
    838c:	f800283a 	ret

00008390 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8390:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    8394:	298f883a 	add	r7,r5,r6
    8398:	20c00104 	addi	r3,r4,4
    839c:	00000606 	br	83b8 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    83a0:	18800037 	ldwio	r2,0(r3)
    83a4:	10bfffec 	andhi	r2,r2,65535
    83a8:	10000326 	beq	r2,zero,83b8 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    83ac:	28800007 	ldb	r2,0(r5)
    83b0:	29400044 	addi	r5,r5,1
    83b4:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    83b8:	29fff936 	bltu	r5,r7,83a0 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    83bc:	3005883a 	mov	r2,r6
    83c0:	f800283a 	ret

000083c4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    83c4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    83c8:	014666b4 	movhi	r5,6554
    83cc:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    83d0:	dc000015 	stw	r16,0(sp)
    83d4:	dfc00115 	stw	ra,4(sp)
    83d8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    83dc:	00085bc0 	call	85bc <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    83e0:	10001126 	beq	r2,zero,8428 <alt_busy_sleep+0x64>
    83e4:	0007883a 	mov	r3,zero
    83e8:	01200034 	movhi	r4,32768
    83ec:	213fffc4 	addi	r4,r4,-1
    83f0:	017999b4 	movhi	r5,58982
    83f4:	295999c4 	addi	r5,r5,26215
    83f8:	00000406 	br	840c <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    83fc:	213fffc4 	addi	r4,r4,-1
    8400:	203ffe1e 	bne	r4,zero,83fc <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8404:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8408:	18c00044 	addi	r3,r3,1
    840c:	18bffb16 	blt	r3,r2,83fc <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8410:	8009883a 	mov	r4,r16
    8414:	01400144 	movi	r5,5
    8418:	00085cc0 	call	85cc <__mulsi3>
    841c:	10bfffc4 	addi	r2,r2,-1
    8420:	103ffe1e 	bne	r2,zero,841c <alt_busy_sleep+0x58>
    8424:	00000506 	br	843c <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8428:	8009883a 	mov	r4,r16
    842c:	01400144 	movi	r5,5
    8430:	00085cc0 	call	85cc <__mulsi3>
    8434:	10bfffc4 	addi	r2,r2,-1
    8438:	00bffe16 	blt	zero,r2,8434 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    843c:	0005883a 	mov	r2,zero
    8440:	dfc00117 	ldw	ra,4(sp)
    8444:	dc000017 	ldw	r16,0(sp)
    8448:	dec00204 	addi	sp,sp,8
    844c:	f800283a 	ret

00008450 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8450:	f800283a 	ret

00008454 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8454:	f800283a 	ret

00008458 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8458:	000170fa 	wrctl	ienable,zero
}
    845c:	f800283a 	ret

00008460 <strlen>:
    8460:	20800007 	ldb	r2,0(r4)
    8464:	10000526 	beq	r2,zero,847c <strlen+0x1c>
    8468:	2007883a 	mov	r3,r4
    846c:	18c00044 	addi	r3,r3,1
    8470:	18800007 	ldb	r2,0(r3)
    8474:	103ffd1e 	bne	r2,zero,846c <strlen+0xc>
    8478:	1905c83a 	sub	r2,r3,r4
    847c:	f800283a 	ret

00008480 <udivmodsi4>:
    8480:	29001b2e 	bgeu	r5,r4,84f0 <udivmodsi4+0x70>
    8484:	28001a16 	blt	r5,zero,84f0 <udivmodsi4+0x70>
    8488:	00800044 	movi	r2,1
    848c:	0007883a 	mov	r3,zero
    8490:	01c007c4 	movi	r7,31
    8494:	00000306 	br	84a4 <udivmodsi4+0x24>
    8498:	19c01326 	beq	r3,r7,84e8 <udivmodsi4+0x68>
    849c:	18c00044 	addi	r3,r3,1
    84a0:	28000416 	blt	r5,zero,84b4 <udivmodsi4+0x34>
    84a4:	294b883a 	add	r5,r5,r5
    84a8:	1085883a 	add	r2,r2,r2
    84ac:	293ffa36 	bltu	r5,r4,8498 <udivmodsi4+0x18>
    84b0:	10000d26 	beq	r2,zero,84e8 <udivmodsi4+0x68>
    84b4:	0007883a 	mov	r3,zero
    84b8:	21400236 	bltu	r4,r5,84c4 <udivmodsi4+0x44>
    84bc:	2149c83a 	sub	r4,r4,r5
    84c0:	1886b03a 	or	r3,r3,r2
    84c4:	1004d07a 	srli	r2,r2,1
    84c8:	280ad07a 	srli	r5,r5,1
    84cc:	103ffa1e 	bne	r2,zero,84b8 <udivmodsi4+0x38>
    84d0:	30000226 	beq	r6,zero,84dc <udivmodsi4+0x5c>
    84d4:	2005883a 	mov	r2,r4
    84d8:	f800283a 	ret
    84dc:	1809883a 	mov	r4,r3
    84e0:	2005883a 	mov	r2,r4
    84e4:	f800283a 	ret
    84e8:	0007883a 	mov	r3,zero
    84ec:	003ff806 	br	84d0 <udivmodsi4+0x50>
    84f0:	00800044 	movi	r2,1
    84f4:	0007883a 	mov	r3,zero
    84f8:	003fef06 	br	84b8 <udivmodsi4+0x38>

000084fc <__divsi3>:
    84fc:	defffe04 	addi	sp,sp,-8
    8500:	dc000015 	stw	r16,0(sp)
    8504:	dfc00115 	stw	ra,4(sp)
    8508:	0021883a 	mov	r16,zero
    850c:	20000c16 	blt	r4,zero,8540 <__divsi3+0x44>
    8510:	000d883a 	mov	r6,zero
    8514:	28000e16 	blt	r5,zero,8550 <__divsi3+0x54>
    8518:	00084800 	call	8480 <udivmodsi4>
    851c:	1007883a 	mov	r3,r2
    8520:	8005003a 	cmpeq	r2,r16,zero
    8524:	1000011e 	bne	r2,zero,852c <__divsi3+0x30>
    8528:	00c7c83a 	sub	r3,zero,r3
    852c:	1805883a 	mov	r2,r3
    8530:	dfc00117 	ldw	ra,4(sp)
    8534:	dc000017 	ldw	r16,0(sp)
    8538:	dec00204 	addi	sp,sp,8
    853c:	f800283a 	ret
    8540:	0109c83a 	sub	r4,zero,r4
    8544:	04000044 	movi	r16,1
    8548:	000d883a 	mov	r6,zero
    854c:	283ff20e 	bge	r5,zero,8518 <__divsi3+0x1c>
    8550:	014bc83a 	sub	r5,zero,r5
    8554:	8021003a 	cmpeq	r16,r16,zero
    8558:	003fef06 	br	8518 <__divsi3+0x1c>

0000855c <__modsi3>:
    855c:	deffff04 	addi	sp,sp,-4
    8560:	dfc00015 	stw	ra,0(sp)
    8564:	01800044 	movi	r6,1
    8568:	2807883a 	mov	r3,r5
    856c:	20000416 	blt	r4,zero,8580 <__modsi3+0x24>
    8570:	28000c16 	blt	r5,zero,85a4 <__modsi3+0x48>
    8574:	dfc00017 	ldw	ra,0(sp)
    8578:	dec00104 	addi	sp,sp,4
    857c:	00084801 	jmpi	8480 <udivmodsi4>
    8580:	0109c83a 	sub	r4,zero,r4
    8584:	28000b16 	blt	r5,zero,85b4 <__modsi3+0x58>
    8588:	180b883a 	mov	r5,r3
    858c:	01800044 	movi	r6,1
    8590:	00084800 	call	8480 <udivmodsi4>
    8594:	0085c83a 	sub	r2,zero,r2
    8598:	dfc00017 	ldw	ra,0(sp)
    859c:	dec00104 	addi	sp,sp,4
    85a0:	f800283a 	ret
    85a4:	014bc83a 	sub	r5,zero,r5
    85a8:	dfc00017 	ldw	ra,0(sp)
    85ac:	dec00104 	addi	sp,sp,4
    85b0:	00084801 	jmpi	8480 <udivmodsi4>
    85b4:	0147c83a 	sub	r3,zero,r5
    85b8:	003ff306 	br	8588 <__modsi3+0x2c>

000085bc <__udivsi3>:
    85bc:	000d883a 	mov	r6,zero
    85c0:	00084801 	jmpi	8480 <udivmodsi4>

000085c4 <__umodsi3>:
    85c4:	01800044 	movi	r6,1
    85c8:	00084801 	jmpi	8480 <udivmodsi4>

000085cc <__mulsi3>:
    85cc:	20000a26 	beq	r4,zero,85f8 <__mulsi3+0x2c>
    85d0:	0007883a 	mov	r3,zero
    85d4:	2080004c 	andi	r2,r4,1
    85d8:	1005003a 	cmpeq	r2,r2,zero
    85dc:	2008d07a 	srli	r4,r4,1
    85e0:	1000011e 	bne	r2,zero,85e8 <__mulsi3+0x1c>
    85e4:	1947883a 	add	r3,r3,r5
    85e8:	294b883a 	add	r5,r5,r5
    85ec:	203ff91e 	bne	r4,zero,85d4 <__mulsi3+0x8>
    85f0:	1805883a 	mov	r2,r3
    85f4:	f800283a 	ret
    85f8:	0007883a 	mov	r3,zero
    85fc:	1805883a 	mov	r2,r3
    8600:	f800283a 	ret
