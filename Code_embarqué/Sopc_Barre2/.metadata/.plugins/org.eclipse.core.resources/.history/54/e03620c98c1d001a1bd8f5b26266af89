/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "unistd.h"
#include "system.h"
#include "stdio.h"
#include "altera_avalon_pio_regs.h"

#define freq (unsigned int*)PWM_AVALON_0_BASE
#define duty (unsigned int*)(PWM_AVALON_0_BASE + 4)

#define vent (unsigned int*)(AVALONANEMO_0_BASE + 4)
#define config (unsigned int*)AVALONANEMO_0_BASE

#define butee_d (int *)(AVALONVERIN_0_BASE+12)
#define butee_g (int *)(AVALONVERIN_0_BASE+8)
#define freq_verrin (int *)AVALONVERIN_0_BASE
#define duty_verrin (int *)(AVALONVERIN_0_BASE+4)
#define config_verrin (int *)(AVALONVERIN_0_BASE+16)
#define angle_barre (int *)(AVALONVERIN_0_BASE+20)

#define code_sens (char *) BOUTON_BASE

#define config_av_button *(unsigned int*) (GESTION_BOUTONS_0_BASE)
#define code_av_button *(unsigned int*)(GESTION_BOUTONS_0_BASE+4)

#define config_compas (unsigned int*) VHDL_COMPASS_0_BASE
#define code_compas (unsigned int*) (VHDL_COMPASS_0_BASE+4)

int main()
{ 
unsigned int d;
unsigned char b;
unsigned int consigne_cap;
alt_putstr("Hello from Nios II!\n");

/********Initialisation des Equipements*********/

/* Initialisation PWM Anemo */

*freq = 0x30D40;	//divise la freq
*duty = 0x186A0;	//fixe le RC
*config=0x0011;
/* Initialisation Configuration Verrin */

*butee_d = 2900;
*butee_g = 1783;
*freq_verrin= 2000;
*duty_verrin= 1500;
*config_verrin = 0x03;

/* Congifuration Compass */
*config_compas = 0x3;

/* Configuration Boutons Poussoirs */
config_av_button = 0x01;

 /************* Génération des commandes **********/
	while(1)
	{
		d = *angle_barre;
		b = code_av_button;
		printf("code_sens= %d\n", b);
		consigne_cap = (*code_compas)&(0x1FF);

	   switch(b)
	   {
	   	   case 1: printf("Mode Manuel\n\n");
	   		   	   *config_verrin = 3;
	   	   	   	   break; //droite

	   	   case 2: printf("Mode Manuel\n\n");
	   		   	   *config_verrin = 7;
	   	   	   	   break; //gauche

	   	   case 3: printf("Mode Automatique\n\n");
	   	   	   	   break;
	   	   case 4:
	   		   	   consigne_cap ++ ;
	   		   	   break;
	   	   case 5:
	   		   	   consigne_cap = consigne_cap +10;
	   		   	   break;
	   	   case 6:
	   		   	   consigne_cap = consigne_cap -10 ;
	   		   	   break;
	   	   case 7:
	   		   	   consigne_cap -- ;
	   		   	   break;
	   	   default:*config_verrin = 1;
	   }
	   printf("La valeur du compass est :%d \n", consigne_cap);
	   --printf("Vitesse du vent : %d Km/h.\n\n", ((*vent)&(0xFF)));
	   usleep(10000);
	}
return 0;
}
